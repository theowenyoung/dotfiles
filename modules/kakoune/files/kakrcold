require-module connect
colorscheme gruvbox

## option
# set-option global ui_options terminal_status_on_top=true

set-option global scrolloff 6,6

add-highlighter global/ number-lines -relative -hlcursor
add-highlighter global/ number-lines -hlcursor
add-highlighter global/ regex \b(TODO|FIXME|XXX|NOTE)\b 0:default+b
add-highlighter global/ wrap -width 80
evaluate-commands %sh{
    plugins="$kak_config/plugins"
    mkdir -p "$plugins"
    [ ! -e "$plugins/plug.kak" ] && \
        git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
    printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}
plug "andreyorst/plug.kak" noload

plug "andreyorst/smarttab.kak" defer smarttab %{
    set-option global softtabstop 2
}
hook global BufCreate .* %{
  editorconfig-load
  autoconfigtab
}


# delete the *scratch* buffer as soon as another is created, but only if it's empty
hook global BufCreate '^\*scratch\*$' %{
    exec '%d'
    hook -once -always global BufCreate '^(?!\*scratch\*).*$' %{
        try %{
            # throw if the buffer has more than one character
            exec -buffer *scratch* 'L<a-K>..<ret>'
            db *scratch*
        }
    }
}



# mapping
# comment
map global normal '#' :comment-line<ret>


# user mode
map global user -docstring 'next lint error' n ':lint-next-error<ret>'
map global user X ":evaluate-commands -buffer * %{ delete-buffer! }<ret>" -docstring "Close all buffers"
map -docstring 'buffer' global user b '<a-;>: open-buffer-picker<ret>'

# Hot reloading
map -docstring 'reload kakrc' global user z ': source "%val{config}/kakrc"; echo reloaded kakrc<ret>'


map -docstring 'next display line' global user j ': displayline_down<ret>'# # soft wrap mode, visual line move





# Goto mode ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈



map -docstring 'file' global goto f '<a-;>: open-file-picker<ret>'









define-command -override open-file-picker -docstring 'open file picker' %{

  prompt file: -shell-script-candidates 'fd --type file' %{

    edit %val{text}

  }

}



map -docstring 'buffer' global goto b '<a-;>: open-buffer-picker<ret>'



define-command -override open-buffer-picker -docstring 'open buffer picker' %{

  prompt buffer: -buffer-completion %{

    buffer %val{text}

  }

}



map -docstring 'grep' global goto / '<a-;>: open-grep-prompt<ret>'



define-command -override open-grep-prompt -docstring 'open grep prompt' %{



  # Provides word completion



  prompt grep: -shell-script-candidates %{


    echo "write '$kak_response_fifo'" > "$kak_command_fifo"
    cat "$kak_response_fifo" | kak -f 's[\w-]{4,}<ret>y%<a-R>a<ret>'
  } %{
    grep %val{text}
  }
}


## hook
# save on pressing enter
hook global NormalKey <ret> w

# Enable <tab>/<s-tab> for insert completion selection
# ──────────────────────────────────────────────────────

hook global InsertCompletionShow .* %{ map window insert <tab> <c-n>; map window insert <s-tab> <c-p> }
hook global InsertCompletionHide .* %{ unmap window insert <tab> <c-n>; unmap window insert <s-tab> <c-p> }




## command
define-command -docstring "save and quit" x "write-all; quit"
define-command mkdir %{ nop %sh{ mkdir -p $(dirname $kak_buffile) }}
define-command -docstring "quit without saving" qq "quit!"



# system clipboard handling
evaluate-commands %sh{
    if [ -n "$SSH_TTY" ]; then
        copy='printf "\033]52;;%s\033\\" $(base64 | tr -d "\n") > /dev/tty'
        paste='printf "paste unsupported through ssh"'
        backend="OSC 52"
    else
        case $(uname) in
            Linux)
                if [ -n "$WAYLAND_DISPLAY" ]; then
                    copy="wl-copy -p"; paste="wl-paste -p"; backend=Wayland
                else
                    copy="xclip -i"; paste="xclip -o"; backend=X11
                fi
                ;;
            Darwin)  copy="pbcopy"; paste="pbpaste"; backend=OSX ;;
        esac
    fi
    printf "map global user -docstring 'paste (after) from clipboard' p '<a-!>%s<ret>'\n" "$paste"
    printf "map global user -docstring 'paste (before) from clipboard' P '!%s<ret>'\n" "$paste"
    printf "map global user -docstring 'yank to primary' y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to %s primary}<ret>'\n" "$copy" "$backend"
    printf "map global user -docstring 'yank to clipboard' Y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to %s clipboard}<ret>'\n" "$copy -selection clipboard" "$backend"
    printf "map global user -docstring 'replace from clipboard' R '|%s<ret>'\n" "$paste"
}




plug "alexherbo2/auto-pairs.kak" %{
    enable-auto-pairs
} config %{
  set-option global auto_pairs ( ) { } [ ] '"' '"' "'" "'" ` ` “ ” ‘ ’ « » ‹ ›
}


plug "kak-lsp/kak-lsp" config %{

    # uncomment to enable debugging
    # eval %sh{echo ${kak_opt_lsp_cmd} >> /tmp/kak-lsp.log}
    # set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

    # this is not necessary; the `lsp-enable-window` will take care of it
    # eval %sh{${kak_opt_lsp_cmd} --kakoune -s $kak_session}

    set global lsp_diagnostic_line_error_sign '║'
    set global lsp_diagnostic_line_warning_sign '┊'

    define-command ne -docstring 'go to next error/warning from lsp' %{ lsp-find-error --include-warnings }
    define-command pe -docstring 'go to previous error/warning from lsp' %{ lsp-find-error --previous --include-warnings }
    define-command ee -docstring 'go to current error/warning from lsp' %{ lsp-find-error --include-warnings; lsp-find-error --previous --include-warnings }

    define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }
    hook global WinSetOption filetype=(c|cpp|cc|rust|javascript|typescript) %{
        set-option window lsp_auto_highlight_references true
        set-option window lsp_hover_anchor false
        lsp-auto-hover-enable
        echo -debug "Enabling LSP for filtetype %opt{filetype}"
        lsp-enable-window
    }

    hook global WinSetOption filetype=(rust) %{
        set window lsp_server_configuration rust.clippy_preference="on"
    }

    hook global WinSetOption filetype=rust %{
        hook window BufWritePre .* %{
            evaluate-commands %sh{
                test -f rustfmt.toml && printf lsp-formatting-sync
            }
        }
    }

    hook global KakEnd .* lsp-exit
}

map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object e '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object k '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
evaluate-commands %sh{ [ -f $kak_config/local.kak ] && echo "source $kak_config/local.kak" }
# Source a local project kak config if it exists
# Make sure it is set as a kak filetype
hook global BufCreate (.*/)?(\.kakrc\.local) %{
    set-option buffer filetype kak
}



def ide %{
    rename-client main
    set global jumpclient main

    new rename-client tools
    set global toolsclient tools

    new rename-client docs
    set global docsclient docs
}

plug "andreyorst/fzf.kak" config %{
  map global normal <c-p> ': fzf-mode<ret>'
  map global user -docstring 'fzf mode' f ': fzf-mode<ret>'
} defer "fzf" %{
X "efer "fzf-file" %{
  set-option global fzf_previ"  false
  set-option global fzf_file_command "find . \( -path '*/.svn*' -o \
                                                -path '*/.git*' -o \
                                                -path '*/.cache*' -o \
                                                -path '*/.mypy_cache*' \) -prune -o \
                                                -type f \
                                                -not -name '*.o' \
                                                -print"
}


try %{ source .kakrc.local }
